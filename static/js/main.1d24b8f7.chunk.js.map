{"version":3,"sources":["actions/fetchData.js","actions/types.js","components/searchBar.js","components/dataContainer.js","components/historyPage.js","components/homePage.js","App.js","serviceWorker.js","reducers/rootReducer.js","store.js","index.js"],"names":["fetchData","query","dispatch","fetchDataRequest","axios","get","then","response","posts","data","fetchDataSuccess","catch","error","fetchDataFailure","message","type","payload","searchData","terms","SearchBar","state","currentInput","handleInputChange","event","newInput","target","value","setState","handleSubmit","preventDefault","props","Form","onSubmit","this","Control","className","placeholder","onChange","style","maxWidth","textAlign","Button","Component","connect","history","results","DataContainer","handleSearchResults","length","map","result","key","objectID","Card","width","marginBottom","Header","author","Body","Title","title","Text","body","variant","href","url","loading","HistoryPage","previousSearch","id","search","onClick","HomePage","page","actions","App","path","exact","component","Boolean","window","location","hostname","match","initState","reducer","action","hits","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1d24b8f7.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n    FETCH_DATA_REQUEST,\n    FETCH_DATA_SUCCESS,\n    FETCH_DATA_FAILURE,\n    NEW_SEARCH\n} from './types';\n\n\n//fetches data from the API based on the search input\nexport const fetchData = (query) => {\n    return (dispatch) => {\n        dispatch(fetchDataRequest())\n        axios\n            .get(\"https://hn.algolia.com/api/v1/search?query=\" + query)\n            .then(response => {\n                const posts = response.data\n                dispatch(fetchDataSuccess(posts))\n            })\n            .catch(error => {\n                dispatch(fetchDataFailure(error.message))\n            })\n    }\n}\n//requesting data\nexport const fetchDataRequest = () => {\n    return {\n        type: FETCH_DATA_REQUEST\n    }\n}\n//if successful, creates a data payload\nconst fetchDataSuccess = posts => {\n    return {\n        type: FETCH_DATA_SUCCESS,\n        payload: posts\n    }\n}\n//otherwise creates an error\nconst fetchDataFailure = error => {\n    return {\n        type: FETCH_DATA_FAILURE,\n        payload: error\n    }\n}\n  \n//handles the search\nexport const searchData = terms => {\n    return {\n        type: NEW_SEARCH,\n        terms: terms\n    }\n}","export const FETCH_DATA_REQUEST = \"FETCH_DATA_REQUEST\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\nexport const FETCH_DATA_FAILURE = \"FETCH_DATA_FAILURE\";\nexport const NEW_SEARCH = 'NEW_SEARCH';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { searchData, fetchData } from '../actions/fetchData';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nclass SearchBar extends Component {\n    state = {\n        currentInput: ''\n    }\n\n    //handles new inputs and updates the current search\n    handleInputChange = (event) => {\n        let newInput = event.target.value;\n        this.setState({\n            currentInput: newInput\n        });\n    }\n    //handles the submit function and starts the results process\n    handleSubmit = (event) => {\n        event.preventDefault()\n        this.props.searchData(this.state.currentInput)\n        this.props.fetchData(this.state.currentInput)\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <Form.Control\n                    className=\"mx-auto\"\n                    placeholder=\"Search\"\n                    type='search'\n                    onChange={this.handleInputChange}\n                    style={{ maxWidth: '200px', textAlign: 'center' }}>\n                </Form.Control><Button className='primary' type='submit'>Search</Button>\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        history: state.history,\n        results: state.data\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        searchData: (terms) => { dispatch(searchData(terms)) },\n        fetchData: (query) => dispatch(fetchData(query))\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from '../actions/fetchData';\nimport { Card } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\nclass DataContainer extends Component {\n\n    //the Handle search results function displays results from the most recently searched item\n\n    handleSearchResults = () => {\n        if (this.props.length === 0) {\n            return (\n                <div> No results!</div>\n            )\n        } else {\n            const { results } = this.props;\n            return (\n                <div>\n                    <h1>Posts</h1>\n                    {results.map(result =>\n                        <div className=\"cardDiv\" key={result.objectID}>\n                            <Card className='mx-auto' style={{ width: '700px', marginBottom: '20px' }}>\n                                <Card.Header>By: {result.author}</Card.Header>\n                                <Card.Body>\n                                    <Card.Title>{result.title}</Card.Title>\n                                    <Card.Text>\n                                        {result.body}\n                                    </Card.Text>\n                                    <Button variant=\"success\" href={result.url}>See Article</Button>\n                                </Card.Body>\n                            </Card>\n                            {'\\n'}\n                        </div>)}\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return this.props.loading ? (\n            <h2>Loading...</h2>\n        ) : this.props.error ? (\n            <h2>{this.error}</h2>\n        ) : (\n                    <div>\n                        <div>{this.handleSearchResults()}</div>\n                    </div>\n                )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        results: state.posts\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: () => dispatch(fetchData())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataContainer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from '../actions/fetchData';\nimport Button from 'react-bootstrap/Button';\n\n//This displays recent searches and updates the list after each search.\n\nclass HistoryPage extends Component {\n\n    //function to pull the previous search\n    previousSearch = (event) => {\n        this.props.fetchData(event.target.id)\n    }\n\n    render() {\n        const { history } = this.props;\n        return (\n            <div>\n                <h2>Search History</h2>\n                {\n                    history.map(search => {\n                        return (\n                            <ul key={search}>\n                            <Button variant='warning' id={search} key={search} onClick={this.previousSearch}>{search}</Button>\n                            </ul>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        history: state.history\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchData: (query) => dispatch(fetchData(query))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HistoryPage);\n","import React, { Component } from 'react';\nimport SearchBar from './searchBar';\nimport DataContainer from './dataContainer';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions/fetchData';\nimport HistoryPage from './historyPage';\n\n//this page is the main home page for the application.\n\nclass HomePage extends Component {\n    render() {\n        return (\n            <div className='home row'>\n                <div className='col'>\n                    <h2>Search for Hacker News!</h2>\n                    <SearchBar page=\"home\" />\n                    <div className='col'>\n                        <DataContainer />\n                    </div>\n                </div>\n                <div className='col'>\n                    <HistoryPage />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(null, actions)(HomePage);","import React from 'react';\nimport './App.css';\nimport HomePage from './components/homePage';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HistoryPage from './components/historyPage';\n\n//main application page, handles displaying all information\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <h1 style={{textAlign: 'center'}}>Welcome!</h1>\n        <Switch>\n          <Route path=\"/\" exact={true} component={HomePage} />\n          <Route path='/history' component={HistoryPage}/>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    FETCH_DATA_REQUEST,\n    FETCH_DATA_SUCCESS,\n    FETCH_DATA_FAILURE,\n    NEW_SEARCH\n} from \"../actions/types\";\n\n//Applications reducer, handles the data pulled from the API and maps it to its respective array\n\n//defines initial state\nconst initState = {\n    loading: false,\n    posts: [],\n    history: [],\n    error: ''\n}\n\nconst reducer = (state = initState, action) => {\n    switch (action.type) {\n        case FETCH_DATA_REQUEST:\n            return {\n                ...state,\n                loading: true\n            }\n        case FETCH_DATA_SUCCESS:\n            return {\n                loading: false,\n                posts: action.payload.hits,\n                history: [...state.history],\n                error: ''\n            }\n        case FETCH_DATA_FAILURE:\n            return {\n                loading: false,\n                posts: [],\n                error: action.payload\n            }\n            case NEW_SEARCH: {\n                return { \n                    ...state, \n                    history: [...state.history, action.terms]\n                 };\n            }\n        default: return state\n    }\n}\n\nexport default reducer;","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducers/rootReducer';\n\n//Creates the redux store which handles state managemenet\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n//Main index, creates the store and displays the app page\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}